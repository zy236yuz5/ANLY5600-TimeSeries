{"title":"Exploratory Data Analysis","markdown":{"yaml":{"title":"Exploratory Data Analysis","navbar":{"left":["about.qmd","Introduction.qmd","DataSources.qmd","DataVis.qmd","EDA.qmd","ARModels.qmd","ASV.qmd","SAF.qmd","GARCH.qmd","TS.qmd","conclusion.qmd","dv.qmd"]},"format":{"html":{"theme":"sandstone","css":"./styles/layout.css","code-fold":true,"toc":true}}},"headingText":"The Household Income Data Analysis","containsRefs":false,"markdown":"\n\n\n\n```{r, echo = FALSE, message = FALSE, warning = FALSE}\nlibrary(reticulate)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n\n```{r, echo=FALSE, results='hide',warning=FALSE,message=FALSE}\ndf <- read.csv(\"../Dataset/project/household_saving.csv\")\ndf$DATE <- as.Date(df$DATE)\n\n```\n\n```{r,warning=FALSE,echo=FALSE}\nlibrary(ggplot2)\n\n\nggplot(data = df, aes(x = DATE, y = W398RC1A027NBEA)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Time Series Plot of Household Income\",\n       x = \"Date\", \n       y = \"The Household Income\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n```\n\nFrom the plot, you can visually inspect:\n\nTrend: Any consistent upward or downward direction.\nSeasonality: Any repeating patterns or cycles.\nVariation: Fluctuations in the data.\nPeriodic fluctuations: Spikes or drops at consistent intervals.\nDetermine if the time series looks multiplicative or additive. An additive time series has constant amplitude and frequency, while a multiplicative one has varying amplitude/frequency.\n\n```{r,warning=FALSE,echo=FALSE}\n# Lag plot\nlagged_data <- data.frame(value = df$W398RC1A027NBEA[-1],\n                          lagged_value = df$W398RC1A027NBEA[-length(df$W398RC1A027NBEA)])\n\n# Enhanced Lag Plot\nggplot(data = lagged_data, aes(x = lagged_value, y = value)) +\n  geom_point(color = \"blue\", alpha = 0.5) +\n  labs(title = \"Lag Plot (lag=1)\",\n       x = \"Value at t-1\",\n       y = \"Value at t\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n\n```\n\n\nYou'd interpret the lag plot by looking for any structure. If the points cluster along a diagonal line from bottom-left to top-right, there's a positive correlation. Any other pattern might suggest non-linearity or some pattern not captured by mere linear correlation\n\n```{r, echo=FALSE}\n#library(ggfortify)\n\n# Decomposition using ggplot2 styling\ndecomposed <- decompose(ts(df$W398RC1A027NBEA, frequency=12), type = \"additive\")\nautoplot(decomposed) + \n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r, echo=FALSE}\nlibrary(forecast)\n\n# ACF Plot\nggAcf(df$W398RC1A027NBEA) +\n  labs(title = \"ACF of Household Income Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n# PACF Plot\nggPacf(df$W398RC1A027NBEA) +\n  labs(title = \"PACF of Household Income Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r, echo=FALSE}\nlibrary(tseries)\nadf.test(df$W398RC1A027NBEA)\n\n\n```\n\n\n```{r, echo=FALSE}\ndetrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$W398RC1A027NBEA))\n\n# Enhanced Detrended Plot\nggplot(data = detrended_data, aes(x = Date, y = Detrended)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Detrended Household Income Time Series\",\n       x = \"Date\",\n       y = \"Detrended Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n\n```{r,warning=FALSE, echo=FALSE}\nlog_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$W398RC1A027NBEA))\n\n# Enhanced Log-transformed Plot with Custom Background\nggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Log-transformed Time Series of Household Income\",\n       x = \"Date\",\n       y = \"Log-transformed Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n\n\n## The Median House Sale Price Data Analysis\n\n```{r, echo=FALSE, results='hide',warning=FALSE,message=FALSE}\ndf <- read.csv(\"../Dataset/project/MSPUS.csv\")\ndf$DATE <- as.Date(df$DATE)\n```\n\n```{r,warning=FALSE,echo=FALSE}\nlibrary(ggplot2)\n\n\nggplot(data = df, aes(x = DATE, y = MSPUS)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Time Series Plot of Median Sale Price\",\n       x = \"Date\", \n       y = \"The Sale Price\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n```\n\nFrom the plot, you can visually inspect:\n\nTrend: Any consistent upward or downward direction.\nSeasonality: Any repeating patterns or cycles.\nVariation: Fluctuations in the data.\nPeriodic fluctuations: Spikes or drops at consistent intervals.\nDetermine if the time series looks multiplicative or additive. An additive time series has constant amplitude and frequency, while a multiplicative one has varying amplitude/frequency.\n\n```{r,warning=FALSE,echo=FALSE}\n# Lag plot\nlagged_data <- data.frame(value = df$MSPUS[-1],\n                          lagged_value = df$MSPUS[-length(df$MSPUS)])\n\n# Enhanced Lag Plot\nggplot(data = lagged_data, aes(x = lagged_value, y = value)) +\n  geom_point(color = \"blue\", alpha = 0.5) +\n  labs(title = \"Lag Plot (lag=1)\",\n       x = \"Value at t-1\",\n       y = \"Value at t\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n\n```\n\n\nYou'd interpret the lag plot by looking for any structure. If the points cluster along a diagonal line from bottom-left to top-right, there's a positive correlation. Any other pattern might suggest non-linearity or some pattern not captured by mere linear correlation\n\n```{r, echo=FALSE}\n#library(ggfortify)\n\n# Decomposition using ggplot2 styling\ndecomposed <- decompose(ts(df$MSPUS, frequency=12), type = \"additive\")\nautoplot(decomposed) + \n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r, echo=FALSE}\nlibrary(forecast)\n\n# ACF Plot\nggAcf(df$MSPUS) +\n  labs(title = \"ACF of Median Sale Price Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n# PACF Plot\nggPacf(df$MSPUS) +\n  labs(title = \"PACF of Median Sale Price Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r, echo=FALSE}\nlibrary(tseries)\nadf.test(df$MSPUS)\n\n\n```\n\n\n```{r, echo=FALSE}\ndetrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$MSPUS))\n\n# Enhanced Detrended Plot\nggplot(data = detrended_data, aes(x = Date, y = Detrended)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Detrended Median Sale Price Time Series\",\n       x = \"Date\",\n       y = \"Detrended Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n\n```{r,warning=FALSE, echo=FALSE}\nlog_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$MSPUS))\n\n# Enhanced Log-transformed Plot with Custom Background\nggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Log-transformed Time Series of Median Sale Price\",\n       x = \"Date\",\n       y = \"Log-transformed Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n## The Housing Affordability Index Data Analysis\n\n```{r, echo=FALSE, results='hide',warning=FALSE,message=FALSE}\ndf <- read.csv(\"../Dataset/project/PSAVERT.csv\")\ndf$DATE <- as.Date(df$DATE)\n\n```\n\n```{r,warning=FALSE}\nlibrary(ggplot2)\n\n\nggplot(data = df, aes(x = DATE, y = PSAVERT)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Time Series Plot of Housing Affordability Index\",\n       x = \"Date\", \n       y = \"The Housing Affordability Index\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n```\nFrom the plot, you can visually inspect:\n\nTrend: Any consistent upward or downward direction.\nSeasonality: Any repeating patterns or cycles.\nVariation: Fluctuations in the data.\nPeriodic fluctuations: Spikes or drops at consistent intervals.\nDetermine if the time series looks multiplicative or additive. An additive time series has constant amplitude and frequency, while a multiplicative one has varying amplitude/frequency.\n\n```{r}\n# Lag plot\nlagged_data <- data.frame(value = df$PSAVERT[-1],\n                          lagged_value = df$PSAVERT[-length(df$PSAVERT)])\n\n# Enhanced Lag Plot\nggplot(data = lagged_data, aes(x = lagged_value, y = value)) +\n  geom_point(color = \"blue\", alpha = 0.5) +\n  labs(title = \"Lag Plot (lag=1)\",\n       x = \"Value at t-1\",\n       y = \"Value at t\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n\n```\nYou'd interpret the lag plot by looking for any structure. If the points cluster along a diagonal line from bottom-left to top-right, there's a positive correlation. Any other pattern might suggest non-linearity or some pattern not captured by mere linear correlation\n\n```{r}\n#library(ggfortify)\n\n# Decomposition using ggplot2 styling\ndecomposed <- decompose(ts(df$PSAVERT, frequency=12), type = \"additive\")\nautoplot(decomposed) + \n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n```{r}\nlibrary(forecast)\n\n# ACF Plot\nggAcf(df$PSAVERT) +\n  labs(title = \"ACF of Housing Affordability Index Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n# PACF Plot\nggPacf(df$PSAVERT) +\n  labs(title = \"PACF of Housing Affordability Index Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\nThe ACF plot can help determine if the series is stationary. If the series is non-stationary, the ACF will decay slowly, while for a stationary series, the ACF will drop off quickly\n\n\n```{r}\nlibrary(tseries)\nadf.test(df$PSAVERT)\n\n\n```\n\nstationary !\n\n```{r}\ndetrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$PSAVERT))\n\n# Enhanced Detrended Plot\nggplot(data = detrended_data, aes(x = Date, y = Detrended)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Detrended Time Series\",\n       x = \"Date\",\n       y = \"Detrended Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r,warning=FALSE}\nlog_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$PSAVERT))\n\n# Enhanced Log-transformed Plot with Custom Background\nggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Log-transformed Time Series of Housing Affordability Index\",\n       x = \"Date\",\n       y = \"Log-transformed Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n\n## The GDP Exploratory Data Analysis\n\n```{r, echo = FALSE}\ndf <- read.csv(\"../Dataset/project/A191RI1Q225SBEA.csv\")\ndf$DATE <- as.Date(df$DATE)\n```\n```{r, echo = FALSE,warning=FALSE}\nlibrary(ggplot2)\n\n\nggplot(data = df, aes(x = DATE, y = A191RI1Q225SBEA)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Time Series Plot of GDP\",\n       x = \"Date\", \n       y = \"Percent Change from Preceding Period\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n\n```\n\n\nFrom the plot, you can visually inspect:\n\nTrend: Any consistent upward or downward direction.\nSeasonality: Any repeating patterns or cycles.\nVariation: Fluctuations in the data.\nPeriodic fluctuations: Spikes or drops at consistent intervals.\nDetermine if the time series looks multiplicative or additive. An additive time series has constant amplitude and frequency, while a multiplicative one has varying amplitude/frequency.\n\n```{r, echo = FALSE}\n# Lag plot\nlagged_data <- data.frame(value = df$A191RI1Q225SBEA[-1],\n                          lagged_value = df$A191RI1Q225SBEA[-length(df$A191RI1Q225SBEA)])\n\n# Enhanced Lag Plot\nggplot(data = lagged_data, aes(x = lagged_value, y = value)) +\n  geom_point(color = \"blue\", alpha = 0.5) +\n  labs(title = \"Lag Plot (lag=1)\",\n       x = \"Value at t-1\",\n       y = \"Value at t\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n```\n\n```{r, echo = FALSE}\n\n# Decomposition using ggplot2 styling\ndecomposed <- decompose(ts(df$A191RI1Q225SBEA, frequency=12), type = \"additive\")\nautoplot(decomposed) + \n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n```\n\n```{r, echo = FALSE}\nlibrary(forecast)\n\n# ACF Plot\nggAcf(df$A191RI1Q225SBEA) +\n  labs(title = \"ACF of GDP Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n# PACF Plot\nggPacf(df$A191RI1Q225SBEA) +\n  labs(title = \"PACF of GDP Time Series\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n```{r, echo = FALSE}\nlibrary(tseries)\nadf.test(df$A191RI1Q225SBEA)\n```\n\n\n```{r, echo = FALSE}\ndetrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$A191RI1Q225SBEA))\n\n# Enhanced Detrended Plot\nggplot(data = detrended_data, aes(x = Date, y = Detrended)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Detrended Time Series\",\n       x = \"Date\",\n       y = \"Detrended Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n\n```{r, warning=FALSE, echo = FALSE}\nlog_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$A191RI1Q225SBEA))\n\n# Enhanced Log-transformed Plot with Custom Background\nggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Log-transformed Time Series of GDP\",\n       x = \"Date\",\n       y = \"Log-transformed Value\") +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"#E0E0E0\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        panel.grid.minor = element_line(color = \"grey\", size = 0.05),\n        plot.background = element_rect(fill = \"#E0E0E0\"))\n\n```\n\n## The Mean Sale Price Analysis\n\n\n```{python, echo=FALSE}\nimport  pandas  as  pd\n\nimport matplotlib.pyplot as plt\nimport altair as alt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n```\n\n\n```{python, echo=FALSE}\n# directory containing the CSV files\n\npath2 = '../Dataset/project/Merged_downsample.csv'\n\ndf_selected = pd.read_csv(path2)\nplt.rcParams.update(plt.rcParamsDefault)\nimport matplotlib as mpl\n\n# Set global figure settings\nmpl.rcParams['figure.facecolor'] = '#E0E0E0'\nmpl.rcParams['axes.facecolor'] = '#E0E0E0'\nmpl.rcParams['savefig.facecolor'] = '#E0E0E0'\nwarnings.filterwarnings('ignore')\n```\n\n\n```{python,echo=FALSE}\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Decomposing\nresult = seasonal_decompose(df_selected['Mean Sale Price'].values, model='additive', period=12)\nfig = result.plot()\nfig.set_facecolor('#E0E0E0')\nplt.show()\n\nwarnings.filterwarnings('ignore')\n```\n\n```{python, echo=FALSE}\nfrom pandas.plotting import lag_plot\n\nplt.figure(figsize=(6, 6))\nlag_plot(df_selected['Mean Sale Price'])\nplt.title('Lag Plot of Mean Sale Price')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n\n```\n\n\n```{python, echo=FALSE}\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\n# ACF plot\nfig, ax = plt.subplots(figsize=(10, 4))\nplot_acf(df_selected['Mean Sale Price'], ax=ax)\nplt.title('ACF of Mean Sale Price')\nplt.show()\n\n# PACF plot\nfig, ax = plt.subplots(figsize=(10, 4))\nplot_pacf(df_selected['Mean Sale Price'], ax=ax)\nplt.title('PACF of Mean Sale Price')\nplt.show()\n\n\n```\n\n\n```{python, echo=FALSE}\nfrom statsmodels.tsa.stattools import adfuller\n\nadf_result = adfuller(df_selected['Mean Sale Price'].values)\nprint(f'ADF Statistic: {adf_result[0]}')\nprint(f'p-value: {adf_result[1]}')\nprint('Critical Values:')\nfor key, value in adf_result[4].items():\n    print(f'\\t{key}: {value}')\n\n```\n\n\n```{python, echo=FALSE}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Filter only numeric columns\ndf_selected = df_selected.rename(columns={\n    \"mean\": \"Mean Rental Price\",\n    \"Log_Mean_Sale_Price\": \"Log Mean Sale Price\"\n})\n\n\nnumeric_cols = df_selected.select_dtypes(include=[float, int])\n\n```\n\n\n```{python, echo=FALSE}\n\n\n# Calculate correlations\ncorr = numeric_cols.corr()\n\n# Set up the matplotlib figure with the desired theme\nplt.figure(figsize=(10, 8))\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": \"#E0E0E0\", \"grid.color\": \"#E0E0E0\"})\nsns.set_context(\"talk\")\n\n# Draw the heatmap with a color map of choice\nsns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5, linecolor='black')\n\n# Adjust the plot's aesthetics\nplt.title('Correlation Heatmap')\nplt.show()\n\n```\n\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles/layout.css","./styles/layout.css"],"toc":true,"output-file":"EDA.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":"sandstone","title":"Exploratory Data Analysis","navbar":{"left":["about.qmd","Introduction.qmd","DataSources.qmd","DataVis.qmd","EDA.qmd","ARModels.qmd","ASV.qmd","SAF.qmd","GARCH.qmd","TS.qmd","conclusion.qmd","dv.qmd"]}},"extensions":{"book":{"multiFile":true}}}}}