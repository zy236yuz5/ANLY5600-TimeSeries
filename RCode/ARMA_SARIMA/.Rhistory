geom_line(color = "blue") +
labs(title = "Log-transformed Time Series of Household Income",
x = "Date",
y = "Log-transformed Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(tseries)
adf.test(log_transformed_data$LogTransformed)
library(gridExtra)
t = ts(diff(diff(df$MSPUS)))
# Create the time series plot with the desired background and borders
ts_plot <- autoplot(t) +
labs(title = "Time Series Plot With two Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Extract the ACF and PACF plots without the theme
acf_plot <- ggAcf(diff(diff(diff(df$MSPUS)))) +
labs(title = "ACF for two Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(diff(diff(diff(df$MSPUS)))) +
labs(title = "PACF for two Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(ts_plot, acf_plot, pacf_plot, ncol = 1)
library(gridExtra)
library(forecast)
library(ggplot2)
t = ts(diff(df$MSPUS))
# Create the time series plot with the desired background and borders
ts_plot <- autoplot(t) +
labs(title = "Time Series Plot With First Order of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Extract the ACF and PACF plots without the theme
acf_plot <- ggAcf(diff(df$MSPUS)) +
labs(title = "ACF for First Order of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(diff(df$MSPUS)) +
labs(title = "PACF for First Order of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(ts_plot, acf_plot, pacf_plot, ncol = 1)
adf.test(diff(df$MSPUS, differences = 1))
# Load required libraries
library(ggplot2)
library(forecast)
# First, perform the augmented Dickey-Fuller test
adf_result <- adf.test(diff(df$MSPUS, differences = 3))
# Print the ADF test result
print(adf_result)
# Set the theme
theme_demo <- theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
# Plot the ACF and PACF of the differenced series with the demo theme
par(mfrow=c(2,1)) # Set up a 2x1 grid for plotting
diff_series = diff(df$MSPUS, differences = 3)
# ACF Plot
acf_plot <- acf(diff_series, plot = FALSE)
print(acf_plot, main="ACF of Differenced Household Income Time Series")
ggAcf(diff_series) + theme_demo
# PACF Plot
pacf_plot <- pacf(diff_series, plot = FALSE)
print(pacf_plot, main="PACF of Differenced Household Income Time Series")
ggPacf(diff_series) + theme_demo
library(forecast)
diff = diff(df$MSPUS, differences = 1)
model <- Arima(diff, order=c(1,1,1))
summary(model)
## empty list to store model fits
set.seed((150))
arma14 =arima.sim(list(order=c(1,1,1), ar=-.4, ma=c(-.3)), n=10000)
arma14 %>% ggtsdisplay()
ARMA_res <- list()
## set counter
cc <-1
## loop over AR
for(p in 0:3){
## loop over MA
for(q in 0:4){
ARMA_res[[cc]]<-arima(x=arma14,order = c(p,3,q))
cc<- cc+1
}
}
## empty list to store model fits
set.seed((150))
arma14 =arima.sim(list(order=c(1,1,1), ar=-.4, ma=c(-.3)), n=10000)
arma14 %>% ggtsdisplay()
ARMA_res <- list()
## set counter
cc <-1
## loop over AR
for(p in 0:3){
## loop over MA
for(q in 0:4){
ARMA_res[[cc]]<-arima(x=arma14,order = c(p,1,q))
cc<- cc+1
}
}
## get AIC values for model evaluation
ARMA_AIC<-sapply(ARMA_res,function(x) x$aic)
ARMA_res[[which(ARMA_AIC == min(ARMA_AIC))]]
## empty list to store model fits
set.seed((150))
arma14 =arima.sim(list(order=c(1,1,1), ar=-.1, ma=c(-.1)), n=10000)
arma14 %>% ggtsdisplay()
ARMA_res <- list()
## set counter
cc <-1
## loop over AR
for(p in 0:3){
## loop over MA
for(q in 0:4){
ARMA_res[[cc]]<-arima(x=arma14,order = c(p,1,q))
cc<- cc+1
}
}
## get AIC values for model evaluation
ARMA_AIC<-sapply(ARMA_res,function(x) x$aic)
ARMA_res[[which(ARMA_AIC == min(ARMA_AIC))]]
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*23),nrow=23) # roughly nrow = 3x4x2
for (p in 1:3)# p=1,2,3 : 3
{
for(q in 1:4)# q=1,2,3,4 :4
{
for(d in 1:3)# d=1,2 :2
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(df$MSPUS,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*23),nrow=23) # roughly nrow = 3x4x2
for (p in 2:3)# p=1,2,3 : 3
{
for(q in 2:4)# q=1,2,3,4 :4
{
for(d in 1:3)# d=1,2 :2
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(df$MSPUS,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
######### compare 3 models
set.seed(345)
model_output <- capture.output(sarima(df$MSPUS, 2,2,3))
model_output2 <- capture.output(sarima(df$MSPUS, 1,1,1))
#################### fitted vs. actual plot  ##############
fit1=Arima(df$MSPUS,order=c(2,2,3),include.drift = TRUE)
fit2=Arima(df$MSPUS,order=c(1,1,1),include.drift = TRUE) #warning for the drift, no drift
# Set background color
par(bg = "#E0E0E0")
# Plotting the data and model fits with custom background and border colors
plot(df$MSPUS, col="blue", main="Time Series with SARIMA Fits",
ylab="Value", xlab="Time",
panel.first = rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col = "#E0E0E0", border = "#E0E0E0"))
lines(fitted(fit1), col="green")
lines(fitted(fit2), col="red")
# Adding a legend
legend("topleft",
legend = c("The Time Series Of the Data", "fit1", "fit2"),
col = c("blue", "green", "red"),
lty=1, # Type of the line (1 is for "solid")
cex=0.8, # Font size of the legend text
box.col="#E0E0E0", bg="#E0E0E0")
#################### fitted vs. actual plot  ##############
fit1=Arima(df$MSPUS,order=c(2,2,3),include.drift = TRUE)
fit2=Arima(df$MSPUS,order=c(1,1,1),include.drift = TRUE) #warning for the drift, no drift
# Set background color
par(bg = "#E0E0E0")
# Plotting the data and model fits with custom background and border colors
plot(df$MSPUS, col="blue", main="Time Series with SARIMA Fits",
ylab="Value", xlab="Time",
panel.first = rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
col = "#E0E0E0", border = "#E0E0E0"))
lines(fitted(fit1), col="black")
lines(fitted(fit2), col="red")
# Adding a legend
legend("topleft",
legend = c("The Time Series Of the Data", "fit1", "fit2"),
col = c("blue", "black", "red"),
lty=1, # Type of the line (1 is for "solid")
cex=0.8, # Font size of the legend text
box.col="#E0E0E0", bg="#E0E0E0")
forecast(fit2,10) # Forecasting for the next 10 minutes
# Autoplot with custom colors
plot_fit2 <- autoplot(forecast(fit2)) +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.key = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Display the plot
print(plot_fit2)
forecast(fit2,20) # Forecasting for the next 10 minutes
# Autoplot with custom colors
plot_fit2 <- autoplot(forecast(fit2)) +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.key = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Display the plot
print(plot_fit2)
library(forecast)
diff = diff(df$MSPUS, differences = 3)
model <- Arima(diff, order=c(1,3,2))
library(forecast)
diff = diff(df$MSPUS, differences = 1)
model <- Arima(diff, order=c(2,2,3))
f1<-meanf(df$MSPUS, h=11) #mean
checkresiduals(f1)
df$MSPUS %>%
Arima(order=c(0,0,1), seasonal=c(0,1,1)) %>%
residuals() %>%
ggtsdisplay()
fit=Arima(df$MSPUS, order = c(0,1,1),seasonal = list(order=c(0,0,1), period=4) )
summary(fit)
f1 <- meanf(df$MSPUS, h=10)
#checkresiduals(f1)
f2 <- naive(df$MSPUS, h=10)
#checkresiduals(f2)
f3 <- rwf(df$MSPUS,drift=TRUE, h=10)
pred=forecast(fit2,20)
accuracy(pred)
pred[['mean']]
accuracy(f1)
accuracy(f2)
accuracy(f3)
gdp.ts=ts(df$MSPUS)
autoplot(gdp.ts) +
autolayer(meanf(gdp.ts, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(gdp.ts, h=11),
series="Naïve", PI=FALSE) +
autolayer(snaive(gdp.ts, h=11),
series="fit", PI=FALSE) +
autolayer(forecast(fit2, h=11),
series="Seasonal naïve", PI=FALSE) +
ggtitle("Forecasts for Household Income") +
xlab("Year") + ylab("Household Income") +
guides(colour=guide_legend(title="Forecast")) +
theme(
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
panel.background = element_rect(fill = "#E0E0E0"),
panel.border = element_rect(fill = NA, color = "#E0E0E0")
)
autoplot(gdp.ts) +
autolayer(meanf(gdp.ts, h=20),
series="Mean.tr", PI=FALSE) +
autolayer(naive(gdp.ts, h=20),
series="Naïve.tr", PI=FALSE) +
autolayer(rwf(gdp.ts, drift=TRUE, h=40),
series="Drift.tr", PI=FALSE) +
autolayer(forecast(fit2,20),
series="fit",PI=FALSE) +
ggtitle("Household Income in US)") +
xlab("Time") + ylab("Household Income") +
guides(colour=guide_legend(title="Forecast")) +
theme(
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
panel.background = element_rect(fill = "#E0E0E0"),
panel.border = element_rect(fill = NA, color = "#E0E0E0")
)
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df <- read.csv("../../Dataset/project/FIXHAI.csv")
df$DATE <- as.Date(df$DATE)
head(df)
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = FIXHAI)) +
geom_line(color = "DarkViolet") +
labs(title = "Time Series Plot of Household Income",
x = "Date",
y = "The Household Income") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = FIXHAI)) +
geom_line(color = "DarkViolet") +
labs(title = "Time Series Plot of Housing Affordability Index",
x = "Date",
y = "The Housing Affordability Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df <- read.csv("../../Dataset/project/FIXHAI.csv")
df$DATE <- as.Date(df$DATE)
head(df)
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = FIXHAI)) +
geom_line(color = "DarkViolet") +
labs(title = "Time Series Plot of Housing Affordability Index",
x = "Date",
y = "The Housing Affordability Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(forecast)
# ACF Plot
ggAcf(df$FIXHAI) +
labs(title = "ACF of Housing Affordability Index Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# PACF Plot
ggPacf(df$FIXHAI) +
labs(title = "PACF of Housing Affordability Index Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
library(tseries)
adf.test(df$FIXHAI)
detrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$FIXHAI))
# Enhanced Detrended Plot
ggplot(data = detrended_data, aes(x = Date, y = Detrended)) +
geom_line(color = "blue") +
labs(title = "Detrended Housing Affordability Index Time Series",
x = "Date",
y = "Detrended Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
log_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$FIXHAI))
# Enhanced Log-transformed Plot with Custom Background
ggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +
geom_line(color = "blue") +
labs(title = "Log-transformed Time Series of Housing Affordability Index",
x = "Date",
y = "Log-transformed Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(tseries)
adf.test(log_transformed_data$LogTransformed)
t = ts(diff(df$FIXHAI))
# Create the time series plot with the desired background and borders
ts_plot <- autoplot(t) +
labs(title = "Time Series Plot With first Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Extract the ACF and PACF plots without the theme
acf_plot <- ggAcf(diff(df$FIXHAI)) +
labs(title = "ACF for first Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(diff(df$FIXHAI)) +
labs(title = "PACF for first Orders of Differencing") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(ts_plot, acf_plot, pacf_plot, ncol = 1)
adf.test(diff(df$FIXHAI, differences = 1))
adf.test(diff(df$FIXHAI, differences = 2))
adf.test(diff(df$FIXHAI, differences = 3))
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df <- read.csv("../../Dataset/project/SIPOVGINIUSA .csv")
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df <- read.csv("../../Dataset/project/SIPOVGINIUSA.csv")
df$DATE <- as.Date(df$DATE)
head(df)
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = SIPOVGINIUSA)) +
geom_line(color = "DarkViolet") +
labs(title = "Time Series Plot of GINI index",
x = "Date",
y = "The GINI index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(forecast)
# ACF Plot
ggAcf(df$SIPOVGINIUSA) +
labs(title = "ACF of GINI index Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
