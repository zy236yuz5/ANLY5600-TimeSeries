plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
library(htmlwidgets)
saveWidget(p, file = "../../image/DataViz/gini.html")
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = W398RC1A027NBEA)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of GINI Index",
x = "Date",
y = "The GINI Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
# Lag plot
lagged_data <- data.frame(value = df$W398RC1A027NBEA[-1],
lagged_value = df$W398RC1A027NBEA[-length(df$W398RC1A027NBEA)])
# Enhanced Lag Plot
ggplot(data = lagged_data, aes(x = lagged_value, y = value)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Lag Plot (lag=1)",
x = "Value at t-1",
y = "Value at t") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
#library(ggfortify)
# Decomposition using ggplot2 styling
decomposed <- decompose(ts(df$W398RC1A027NBEA, frequency=12), type = "additive")
autoplot(decomposed) +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
library(forecast)
# ACF Plot
ggAcf(df$W398RC1A027NBEA) +
labs(title = "ACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# PACF Plot
ggPacf(df$W398RC1A027NBEA) +
labs(title = "PACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# ACF and PACF
acf(df$W398RC1A027NBEA)
pacf(df$W398RC1A027NBEA)
library(tseries)
adf.test(df$W398RC1A027NBEA)
detrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$W398RC1A027NBEA))
# Enhanced Detrended Plot
ggplot(data = detrended_data, aes(x = Date, y = Detrended)) +
geom_line(color = "blue") +
labs(title = "Detrended Time Series",
x = "Date",
y = "Detrended Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
log_transformed <- log(df$W398RC1A027NBEA)
plot(log_transformed, main = "Log-transformed Time Series")
log_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$W398RC1A027NBEA))
# Enhanced Log-transformed Plot with Custom Background
ggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +
geom_line(color = "blue") +
labs(title = "Log-transformed Time Series of GDP",
x = "Date",
y = "Log-transformed Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
df <- read.csv("../../Dataset/project/household_saving.csv")
df$DATE <- as.Date(df$DATE)
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~SIPOVGINIUSA, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
df <- read.csv("../../Dataset/project/household_saving.csv")
df$DATE <- as.Date(df$DATE)
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~W398RC1A027NBEA, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
library(htmlwidgets)
saveWidget(p, file = "../../image/DataViz/gini.html")
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = W398RC1A027NBEA)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of GINI Index",
x = "Date",
y = "The GINI Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
# Lag plot
lagged_data <- data.frame(value = df$W398RC1A027NBEA[-1],
lagged_value = df$W398RC1A027NBEA[-length(df$W398RC1A027NBEA)])
# Enhanced Lag Plot
ggplot(data = lagged_data, aes(x = lagged_value, y = value)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Lag Plot (lag=1)",
x = "Value at t-1",
y = "Value at t") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
#library(ggfortify)
# Decomposition using ggplot2 styling
decomposed <- decompose(ts(df$W398RC1A027NBEA, frequency=12), type = "additive")
autoplot(decomposed) +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
library(forecast)
# ACF Plot
ggAcf(df$W398RC1A027NBEA) +
labs(title = "ACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# PACF Plot
ggPacf(df$W398RC1A027NBEA) +
labs(title = "PACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# ACF and PACF
acf(df$W398RC1A027NBEA)
pacf(df$W398RC1A027NBEA)
library(tseries)
adf.test(df$W398RC1A027NBEA)
detrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$W398RC1A027NBEA))
# Enhanced Detrended Plot
ggplot(data = detrended_data, aes(x = Date, y = Detrended)) +
geom_line(color = "blue") +
labs(title = "Detrended Time Series",
x = "Date",
y = "Detrended Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
detrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$W398RC1A027NBEA))
# Enhanced Detrended Plot
ggplot(data = detrended_data, aes(x = Date, y = Detrended)) +
geom_line(color = "blue") +
labs(title = "Detrended Time Series",
x = "Date",
y = "Detrended Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
log_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$W398RC1A027NBEA))
# Enhanced Log-transformed Plot with Custom Background
ggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +
geom_line(color = "blue") +
labs(title = "Log-transformed Time Series of GDP",
x = "Date",
y = "Log-transformed Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
df <- read.csv("../../Dataset/project/PSAVERT.csv")
df$DATE <- as.Date(df$DATE)
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~PSAVERT, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
library(htmlwidgets)
saveWidget(p, file = "../../image/DataViz/gini.html")
df <- read.csv("../../Dataset/project/household_saving.csv")
df$DATE <- as.Date(df$DATE)
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = PSAVERT)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of GINI Index",
x = "Date",
y = "The GINI Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
df <- read.csv("../../Dataset/project/PSAVERT.csv")
df$DATE <- as.Date(df$DATE)
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~PSAVERT, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
df <- read.csv("../../Dataset/project/SIPOVGINIUSA.csv")
df$DATE <- as.Date(df$DATE)
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~PSAVERT, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
library(plotly)
# Create a plotly plot with background color set to #E0E0E0 and line color set to grey
p <- plot_ly(data = df, x = ~DATE, y = ~SIPOVGINIUSA, type = 'scatter', mode = 'lines',
line = list(color = 'grey')) %>%
layout(
title = "GINI Index for the United States Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "GINI Index"),
plot_bgcolor = '#E0E0E0',   # Setting the background color
paper_bgcolor = '#E0E0E0'  # Setting the surrounding background color
)
# Display the plot
p
library(htmlwidgets)
saveWidget(p, file = "../../image/DataViz/gini.html")
df <- read.csv("../../Dataset/project/PSAVERT.csv")
df$DATE <- as.Date(df$DATE)
library(ggplot2)
ggplot(data = df, aes(x = DATE, y = PSAVERT)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of GINI Index",
x = "Date",
y = "The GINI Index") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
# Lag plot
lagged_data <- data.frame(value = df$PSAVERT[-1],
lagged_value = df$PSAVERT[-length(df$PSAVERT)])
# Enhanced Lag Plot
ggplot(data = lagged_data, aes(x = lagged_value, y = value)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Lag Plot (lag=1)",
x = "Value at t-1",
y = "Value at t") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
#library(ggfortify)
# Decomposition using ggplot2 styling
decomposed <- decompose(ts(df$PSAVERT, frequency=12), type = "additive")
autoplot(decomposed) +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
library(forecast)
# ACF Plot
ggAcf(df$PSAVERT) +
labs(title = "ACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
# PACF Plot
ggPacf(df$PSAVERT) +
labs(title = "PACF of GDP Time Series") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0"))
library(tseries)
adf.test(df$PSAVERT)
detrended_data <- data.frame(Date = df$DATE[-1], Detrended = diff(df$PSAVERT))
# Enhanced Detrended Plot
ggplot(data = detrended_data, aes(x = Date, y = Detrended)) +
geom_line(color = "blue") +
labs(title = "Detrended Time Series",
x = "Date",
y = "Detrended Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
log_transformed_data <- data.frame(Date = df$DATE, LogTransformed = log(df$PSAVERT))
# Enhanced Log-transformed Plot with Custom Background
ggplot(data = log_transformed_data, aes(x = Date, y = LogTransformed)) +
geom_line(color = "blue") +
labs(title = "Log-transformed Time Series of GDP",
x = "Date",
y = "Log-transformed Value") +
theme_minimal() +
theme(panel.background = element_rect(fill = "#E0E0E0"),
panel.grid.major = element_line(color = "grey", size = 0.1),
panel.grid.minor = element_line(color = "grey", size = 0.05),
plot.background = element_rect(fill = "#E0E0E0"))
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
data<-read.csv("climateDC.csv",header =TRUE)
#Extract rows with missing values
df_na_rows <- data[which(rowSums(is.na(data)) > 0),]
#Extract columns with missing values
df_na_cols <- data[, which(colSums(is.na(data)) > 0)]
library(imputeTS)
imputed_time_series <- na_ma(data, k = 4, weighting = "exponential")
df<-data.frame(imputed_time_series)
str(df)
df$DATE<-as.Date(df$DATE,format = "%m/%d/%y")
library(lubridate)
df$year <- year(df$DATE)
head(df)
######## getting data for only one station
table(df$NAME)
newdf<-df[df$NAME=="NATIONAL ARBORETUM DC, MD US",]
head(newdf)
############ for a larger window
#library(dplyr)
start_date <- as.Date("2012-01-01")
data_subset <- filter(newdf, DATE >= start_date)
temp<-ts(newdf$TOBS,star=decimal_date(as.Date("1973-01-01",format = "%Y-%m-%d")),frequency = 365.25)
### can get monthly data
# Get mean value for each month
mean_data <- newdf %>%
mutate(month = month(DATE), year = year(DATE)) %>%
group_by(year, month) %>%
summarize(mean_value = mean(TOBS))
temp_month<-ts(mean_data$mean_value,star=decimal_date(as.Date("1973-01-01",format = "%Y-%m-%d")),frequency = 12)
tempL<-ts(data_subset$TOBS,star=decimal_date(as.Date("2012-01-01",format = "%Y-%m-%d")),frequency = 365.25)
### can get monthly data
# Get mean value for each month
mean_data <- data_subset  %>%
mutate(month = month(DATE), year = year(DATE)) %>%
group_by(year, month) %>%
summarize(mean_value = mean(TOBS))
temp_monthL<<-ts(mean_data$mean_value,star=decimal_date(as.Date("2012-01-01",format = "%Y-%m-%d")),frequency = 12)
# Lag plot for temp
lag_temp <- qplot(y = lag(temp), x = temp, main="Lag Plot for temp")
print(lag_temp)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
data<-read.csv("climateDC.csv",header =TRUE)
#Extract rows with missing values
df_na_rows <- data[which(rowSums(is.na(data)) > 0),]
#Extract columns with missing values
df_na_cols <- data[, which(colSums(is.na(data)) > 0)]
library(imputeTS)
imputed_time_series <- na_ma(data, k = 4, weighting = "exponential")
df<-data.frame(imputed_time_series)
str(df)
df$DATE<-as.Date(df$DATE,format = "%m/%d/%y")
library(lubridate)
df$year <- year(df$DATE)
head(df)
######## getting data for only one station
table(df$NAME)
newdf<-df[df$NAME=="NATIONAL ARBORETUM DC, MD US",]
head(newdf)
############ for a larger window
#library(dplyr)
start_date <- as.Date("2012-01-01")
data_subset <- filter(newdf, DATE >= start_date)
temp<-ts(newdf$TOBS,star=decimal_date(as.Date("1973-01-01",format = "%Y-%m-%d")),frequency = 365.25)
### can get monthly data
# Get mean value for each month
mean_data <- newdf %>%
mutate(month = month(DATE), year = year(DATE)) %>%
group_by(year, month) %>%
summarize(mean_value = mean(TOBS))
temp_month<-ts(mean_data$mean_value,star=decimal_date(as.Date("1973-01-01",format = "%Y-%m-%d")),frequency = 12)
tempL<-ts(data_subset$TOBS,star=decimal_date(as.Date("2012-01-01",format = "%Y-%m-%d")),frequency = 365.25)
### can get monthly data
# Get mean value for each month
mean_data <- data_subset  %>%
mutate(month = month(DATE), year = year(DATE)) %>%
group_by(year, month) %>%
summarize(mean_value = mean(TOBS))
temp_monthL<<-ts(mean_data$mean_value,star=decimal_date(as.Date("2012-01-01",format = "%Y-%m-%d")),frequency = 12)
# Lag plot for temp
lag_temp <- qplot(y = lag(temp), x = temp, main="Lag Plot for temp")
print(lag_temp)
# Lag plot for temp
ts_lags(temp)
