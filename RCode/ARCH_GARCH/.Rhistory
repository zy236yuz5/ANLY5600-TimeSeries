)
p
htmlwidgets::saveWidget(p, "../../image/GARCH/hs.html")
library(ggplot2)
p <- ggplot(san_jose_data, aes(x = date)) +
geom_line(aes(y = Sale_Price_Return), color = "blue") +
geom_line(aes(y = Home_Value_Return), color = "red") +
geom_line(aes(y = Rental_Price_Return), color = "green") +
labs(title = "Time Series Plot Of Returns", x = "Date", y = "Value") +
theme_minimal()
# Modify the background color
p <- p + theme(
plot.background = element_rect(fill = "#E0E0E0", color = NA), # Background of the entire plot
panel.background = element_rect(fill = "#E0E0E0", color = NA)  # Background of the plotting area
)
# Display the plot
p
df1 = san_jose_data
df1$date <- as.Date(df1$date, format = "%Y-%m-%d")
df1
library(caret)
set.seed(236) # for reproducibility
splitIndex <- createDataPartition(df1$Home_Value_Return, p = 0.8, list = FALSE)
train <- df1[splitIndex, ]
test <- df1[-splitIndex, ]
head(train)
# Linear model and check coefficients
model <- lm(Mean.Home.Value ~ Mean.Sale.Price + mean, data = df1)
summary(model)
library(car)
vif(model)
predictions <- predict(model, newdata = test)
SSE <- sum((predictions - test$Mean.Home.Value)^2)
SST <- sum((test$Mean.Home.Value - mean(train$Mean.Home.Value))^2)
rsquared_test <- 1 - SSE/SST
rsquared_test
lm.residuals <- residuals(model)
plot(lm.residuals, ylab = "Residuals", main = "Residuals ")
acf_plot <- ggAcf(lm.residuals) +
labs(title = "ACF for Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(lm.residuals) +
labs(title = "PACF for Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(acf_plot, pacf_plot, ncol = 1)
library(tseries)
adf.test(lm.residuals)
# Reference from the lab 6 part 1 demo:
temp.ts = log(diff(lm.residuals))
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*71),nrow=71)
for (p in 1:5)
{
for(q in 1:5)
{
for(d in 0:2)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(temp.ts,order=c(p-1,d,q-1),include.drift=FALSE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
set.seed(236)
model_output21 <- capture.output(sarima(lm.residuals, 0,1,1))
model_output22 <- capture.output(sarima(lm.residuals, 0,1,4))
cat(model_output21[120:147], model_output21[length(model_output21)], sep = "\n")
cat(model_output22[50:80], model_output22[length(model_output22)], sep = "\n")
mean_value <- mean(temp.ts, na.rm = TRUE)
# Replace NaN values with the mean
temp.ts[is.na(temp.ts)] <- mean_value
# View the modified time series
temp.ts
mean_value <- mean(temp.ts, na.rm = TRUE)
# Replace NaN values with the mean
temp.ts[is.na(temp.ts)] <- mean_value
fit2 <- arima(temp.ts, order = c(0,1,1))
summary(fit2)
arima.res <- residuals(fit2)
# Plot the residuals
acf_plot <- ggAcf(arima.res) +
labs(title = "ACF for Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(arima.res) +
labs(title = "PACF for Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(acf_plot, pacf_plot, ncol = 1)
acf_plot <- ggAcf(arima.res^2) +
labs(title = "ACF for Squared Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
pacf_plot <- ggPacf(arima.res^2) +
labs(title = "PACF for Squared Model Residuals") +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Combine the plots
grid.arrange(acf_plot, pacf_plot, ncol = 1)
arima.res[is.na(arima.res)] <- mean(arima.res, na.rm = TRUE)  # Or median
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(arima.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
library(fGarch)
summary(garchFit(~garch(5,1), arima.res,trace = F))
summary(garchFit(~garch(1,0), arima.res,trace = F))
# Autoplot with custom colors
plot_fit_ <- autoplot(forecast(fit2,10)) +
theme(
panel.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
plot.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.background = element_rect(fill = "#E0E0E0", color = "#E0E0E0"),
legend.key = element_rect(fill = "#E0E0E0", color = "#E0E0E0")
)
# Display the plot
print(plot_fit_)
summary(final.fit <- garchFit(~garch(1,0), arima.res,trace = F))
predict(final.fit, n.ahead = 10, plot=TRUE)
box_ljung_test <- Box.test(arima.res, lag = 10, type = "Ljung-Box")
# Display the test results
box_ljung_test
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(gridExtra)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df1 <- read.csv("../../Dataset/project/household_saving.csv")
df2 <- read.csv("../../Dataset/project/MEHOINUSA672N.csv")
df3 <- read.csv("../../Dataset/project/MSPUS.csv")
df4 <- read.csv("../../Dataset/project/SIPOVGINIUSA.csv")
df5 <- read.csv("../../Dataset/project/FIXHAI.csv")
df6 <- read.csv("../../Dataset/project/PSAVERT.csv")
df7 <- read.csv("../../Dataset/project/A191RI1Q225SBEA.csv")
df8 <- read.csv("../../Dataset/project/Merged_downsample.csv")
df1$DATE <- as.Date(df1$DATE)
df2$DATE <- as.Date(df2$DATE)
df3$DATE <- as.Date(df3$DATE)
df4$DATE <- as.Date(df4$DATE)
df5$DATE <- as.Date(df5$DATE)
df6$DATE <- as.Date(df6$DATE)
df7$DATE <- as.Date(df7$DATE)
df8$date <- as.Date(df8$date)
head(df8)
# Load necessary library
library(dplyr)
# Calculate returns
data <- df8 %>%
mutate(
Home_Value_Return = (Mean.Home.Value - lag(Mean.Home.Value)) / lag(Mean.Home.Value) * 100,
Rental_Price_Return = (mean - lag(mean)) / lag(mean) * 100,
Sale_Price_Return = (Mean.Sale.Price - lag(Mean.Sale.Price)) / lag(Mean.Sale.Price) * 100
)
san_jose_data <- data %>%
filter(Metropolitan.Area == "San Jose, CA")
head(san_jose_data)
library(plotly)
# Your existing plot_ly code
p <- plot_ly(data = san_jose_data, x = ~date) %>%
add_trace(y = ~Rental_Price_Return, name = 'Mean Rental Price', mode = 'lines')
# Adding background color and title
p <- p %>% layout(
title = "Mean Rental Price Over Time",  # Add your title here
paper_bgcolor = '#E0E0E0',  # Set the background color of the plotting area
plot_bgcolor = '#E0E0E0'  # Set the background color of the graph
)
# Display the plot
p
htmlwidgets::saveWidget(p, "../../image/GARCH/rental.html")
library(plotly)
# Your existing plot_ly code
p <- plot_ly(data = san_jose_data, x = ~date) %>%
add_trace(y = ~Rental_Price_Return, name = 'Mean Rental Price', mode = 'lines')
# Adding background color and title
p <- p %>% layout(
title = "Mean Rental Price Over Time",  # Add your title here
paper_bgcolor = '#E0E0E0',  # Set the background color of the plotting area
plot_bgcolor = '#E0E0E0'  # Set the background color of the graph
)
# Display the plot
p
htmlwidgets::saveWidget(p, "../../image/GARCH/rental.html")
htmlwidgets::saveWidget(p, "./rental.html")
library(reticulate)
library(ggplot2)
library(forecast)
library(astsa)
library(gridExtra)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(plotly)
library(TTR) # For the SMA function
df1 <- read.csv("../../Dataset/project/household_saving.csv")
df2 <- read.csv("../../Dataset/project/MEHOINUSA672N.csv")
df3 <- read.csv("../../Dataset/project/MSPUS.csv")
df4 <- read.csv("../../Dataset/project/SIPOVGINIUSA.csv")
df5 <- read.csv("../../Dataset/project/FIXHAI.csv")
df6 <- read.csv("../../Dataset/project/PSAVERT.csv")
df7 <- read.csv("../../Dataset/project/A191RI1Q225SBEA.csv")
df8 <- read.csv("../../Dataset/project/Merged_downsample.csv")
df1$DATE <- as.Date(df1$DATE)
df2$DATE <- as.Date(df2$DATE)
df3$DATE <- as.Date(df3$DATE)
df4$DATE <- as.Date(df4$DATE)
df5$DATE <- as.Date(df5$DATE)
df6$DATE <- as.Date(df6$DATE)
df7$DATE <- as.Date(df7$DATE)
df8$date <- as.Date(df8$date)
head(df8)
# Load necessary library
library(dplyr)
# Calculate returns
data <- df8 %>%
mutate(
Home_Value_Return = (Mean.Home.Value - lag(Mean.Home.Value)) / lag(Mean.Home.Value) * 100,
Rental_Price_Return = (mean - lag(mean)) / lag(mean) * 100,
Sale_Price_Return = (Mean.Sale.Price - lag(Mean.Sale.Price)) / lag(Mean.Sale.Price) * 100
)
san_jose_data <- data %>%
filter(Metropolitan.Area == "San Jose, CA")
head(san_jose_data)
library(plotly)
# Your existing plot_ly code
p <- plot_ly(data = san_jose_data, x = ~date) %>%
add_trace(y = ~Rental_Price_Return, name = 'Mean Rental Price', mode = 'lines')
# Adding background color and title
p <- p %>% layout(
title = "Mean Rental Price Over Time",  # Add your title here
paper_bgcolor = '#E0E0E0',  # Set the background color of the plotting area
plot_bgcolor = '#E0E0E0'  # Set the background color of the graph
)
# Display the plot
p
htmlwidgets::saveWidget(p, "../../image/GARCH/rental.html")
p <- plot_ly(data = san_jose_data, x = ~date) %>%
add_trace(y = ~Mean.Sale.Price, name = 'Mean Sale Price', mode = 'lines') %>%
add_trace(y = ~Mean.Home.Value, name = 'Mean Home Value', mode = 'lines')
# Adding background color and title
p <- p %>% layout(
title = "Mean Sale Price and Home Value Over Time",  # Add your title here
paper_bgcolor = '#E0E0E0',  # Set the background color of the plotting area
plot_bgcolor = '#E0E0E0'  # Set the background color of the graph
)
p
htmlwidgets::saveWidget(p, "../../image/GARCH/hs.html")
library(ggplot2)
p <- ggplot(san_jose_data, aes(x = date)) +
geom_line(aes(y = Sale_Price_Return), color = "blue") +
geom_line(aes(y = Home_Value_Return), color = "red") +
geom_line(aes(y = Rental_Price_Return), color = "green") +
labs(title = "Time Series Plot Of Returns", x = "Date", y = "Value") +
theme_minimal()
# Modify the background color
p <- p + theme(
plot.background = element_rect(fill = "#E0E0E0", color = NA), # Background of the entire plot
panel.background = element_rect(fill = "#E0E0E0", color = NA)  # Background of the plotting area
)
# Display the plot
p
df1 = san_jose_data
df1$date <- as.Date(df1$date, format = "%Y-%m-%d")
df1
library(caret)
set.seed(236) # for reproducibility
splitIndex <- createDataPartition(df1$Home_Value_Return, p = 0.8, list = FALSE)
train <- df1[splitIndex, ]
test <- df1[-splitIndex, ]
head(train)
# Linear model and check coefficients
model <- lm(Mean.Home.Value ~ Mean.Sale.Price + mean, data = df1)
summary(model)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(dplyr)
library(reshape2)
# Get the required libraries
library( "scales" )        # variable transforms, formatting tables
library( "stargazer" )     # formatting regression output
library( "dplyr" )         # data wrangling
library( "pander" )        # nice tables
library( "Wats" )
library(plotly)
library('quantmod')
# gather stock price data from Yahoo Finance and focus on Disney’s adjusted stock prices starting from 2016
getSymbols("DIS", from="2016-01-01", src="yahoo")
head(DIS)
any(is.na(DIS))
x <- list(
title = "date"
)
y <- list(
title = "value"
)
stock <- data.frame(DIS$DIS.Adjusted)
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('DIS Adjusted','Dates')   # USE Adjusted price as required
head(stock)
stock$Dates<-as.Date(stock$Dates,"%Y-%m-%d")
str(stock)
fig <- plot_ly(stock, x = ~Dates, y = ~`DIS Adjusted`, name = 'DIS Adjust Stock Price From 2016', type = 'scatter', mode = 'lines') %>%
layout(
title = "DIS Adjust Stock Price From 2016",
paper_bgcolor = '#E0E0E0', # Set the background color
plot_bgcolor = '#E0E0E0', # Set the background color
xaxis = list(title = "Date"),
yaxis = list(title = "Adjusted Stock Price")
)
fig
dataTS <-data.frame("Y"=stock$`DIS Adjusted`)
dataTS$Ts<-seq(1:length(stock$`DIS Adjusted`))  # Make it seq for us to separate the dataset
dataTS$D <- ifelse(stock$Dates < as.Date("2020-02-20"), 0, 1)
dataTS$P<- seq_along(stock$Dates)
dataTS$P[stock$Dates < as.Date("2020-02-20")] <- 0
#dataTS$Dates <- stock$Dates
head(dataTS)
tail(dataTS)
### to find the interrupted time
index2020_02_20 <- which(stock$Dates == as.Date("2020-02-20"))
index2020_02_20
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(lubridate)
library(dplyr)
library(reshape2)
# Get the required libraries
library( "scales" )        # variable transforms, formatting tables
library( "stargazer" )     # formatting regression output
library( "dplyr" )         # data wrangling
library( "pander" )        # nice tables
library( "Wats" )
library(plotly)
library('quantmod')
# gather stock price data from Yahoo Finance and focus on Disney’s adjusted stock prices starting from 2016
getSymbols("DIS", from="2016-01-01", src="yahoo")
head(DIS)
any(is.na(DIS))
x <- list(
title = "date"
)
y <- list(
title = "value"
)
stock <- data.frame(DIS$DIS.Adjusted)
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('DIS Adjusted','Dates')   # USE Adjusted price as required
head(stock)
stock$Dates<-as.Date(stock$Dates,"%Y-%m-%d")
str(stock)
fig <- plot_ly(stock, x = ~Dates, y = ~`DIS Adjusted`, name = 'DIS Adjust Stock Price From 2016', type = 'scatter', mode = 'lines') %>%
layout(
title = "DIS Adjust Stock Price From 2016",
paper_bgcolor = '#E0E0E0', # Set the background color
plot_bgcolor = '#E0E0E0', # Set the background color
xaxis = list(title = "Date"),
yaxis = list(title = "Adjusted Stock Price")
)
fig
dataTS <-data.frame("Y"=stock$`DIS Adjusted`)
dataTS$Ts<-seq(1:length(stock$`DIS Adjusted`))  # Make it seq for us to separate the dataset
dataTS$D <- ifelse(stock$Dates < as.Date("2020-02-20"), 0, 1)
dataTS$P<- seq_along(stock$Dates)
dataTS$P[stock$Dates < as.Date("2020-02-20")] <- 0
#dataTS$Dates <- stock$Dates
head(dataTS)
tail(dataTS)
### to find the interrupted time
index2020_02_20 <- which(stock$Dates == as.Date("2020-02-20"))
index2020_02_20
d.temp <- rbind( head(dataTS), c("...","...","...","..."),
dataTS[ 1020:1039, ],
c("**START**","**COVID**","---","---"),
dataTS[ 1040:1060, ],
c("...","...","...","..."),
tail(dataTS) )
d.temp
row.names( d.temp ) <- NULL
pander( d.temp )
plot( dataTS$Ts, dataTS$Y,
bty="n", pch=19, col="#E0E0E0",
xlab = "Time (days)",
ylab = "Wages and Salaries" )
# Line marking the interruption
abline( v=1039, col="black", lty=2 )
text( 1000, 170, "Start of COVID", col="black", cex=1.3, pos=4 )
# Add the regression line
ts <- lm( Y ~ Ts + D + P, data=dataTS )
lines( dataTS$Ts, ts$fitted.values, col="steelblue", lwd=2 )
regTS = lm ( Y ~ Ts + D + P, data=dataTS )  # Our time series model
stargazer( regTS,
type = "html",
dep.var.labels = ("Wellbeing"),
column.labels = ("Model results"),
covariate.labels = c("Time", "Treatment",
"Time Since Treatment"),
omit.stat = "all",
digits = 2 )
summary(regTS)
regTS
# We create a small dataset with the new values
data1 <- as.data.frame( cbind( Ts = 1040, D = 1, P = 1 ))
y1 <- predict( regTS, data1 )
y1
dataTS$Y[1:10]
# We plot our initial observations, the column Y in our dataset
plot( dataTS$Y,
bty="n",
xlim = c(1, 1984),
ylim = c(0, 300),
col = gray(0.5,0.5), pch=19,
xlab = "Time (days)",
ylab = "Wellbeing Index")
# We add a point showing the level of wellbeing at time = 201)
points( 1040, y1, col = "dodgerblue4",
pch = 19, bg = "dodgerblue4", cex = 2 )
text( 1040, y1, labels = "t = 1040", pos = 4, cex = 1 )
# Line marking the interruption
abline( v=1039, col="red", lty=2 )
